// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WareHouseManagement.Data;

#nullable disable

namespace WareHouseManagement.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250220004418_Intial")]
    partial class Intial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Account.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ServiceId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Account.ServiceRegistered", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRegistereds");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Customer_Entity.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerGroupId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Customer_Entity.CustomerGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Product_Entity.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MeasureUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PricePerUnit")
                        .HasColumnType("real");

                    b.Property<string>("ProductTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Product_Entity.ProductType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Vendor_EntiTy.Vendor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("VendorGroupId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Vendor_Entity.VendorGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VendorGroups");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Warehouse_Entity.Stock", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Warehouse_Entity.Warehouse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.ExportFormDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FormId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "FormId", "WarehouseId");

                    b.HasIndex("FormId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ExportDetails");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.ImportFormDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FormId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "FormId", "WarehouseId");

                    b.HasIndex("FormId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.StockExportForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("StockExportForms");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.StockImportForm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId")
                        .IsUnique();

                    b.ToTable("StockImportForms");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.CustomerBuyReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("ReceiptValue")
                        .HasColumnType("real");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TaxId");

                    b.ToTable("CustomerBuyReceipts");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.CustomerBuyReceiptDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("PriceOfOne")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("CustomerBuyReceiptDetails");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.Tax", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.VendorReplenishReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("ReceiptValue")
                        .HasColumnType("real");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaxId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorReplenishReceipts");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.VendorReplenishReceiptDetail", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("PriceOfOne")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("ProductId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("VendorReplenishReceiptDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Account.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Account.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WareHouseManagement.Model.Entity.Account.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Account.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Account.Account", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Account.ServiceRegistered", "ServiceRegistered")
                        .WithMany("Accounts")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRegistered");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Customer_Entity.Customer", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Customer_Entity.CustomerGroup", "CustomerGroup")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerGroupId");

                    b.Navigation("CustomerGroup");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Product_Entity.Product", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Product_Entity.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Vendor_EntiTy.Vendor", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Vendor_Entity.VendorGroup", "VendorGroup")
                        .WithMany("Vendors")
                        .HasForeignKey("VendorGroupId");

                    b.Navigation("VendorGroup");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Warehouse_Entity.Stock", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Product_Entity.Product", "ProductNav")
                        .WithMany("Stocks")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_stock_product");

                    b.HasOne("WareHouseManagement.Model.Entity.Warehouse_Entity.Warehouse", "WarehouseNav")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_warehouse_receipt");

                    b.Navigation("ProductNav");

                    b.Navigation("WarehouseNav");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.ExportFormDetail", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Form.StockExportForm", "FormNav")
                        .WithMany("Details")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_exportdetail_form");

                    b.HasOne("WareHouseManagement.Model.Entity.Product_Entity.Product", "ProductNav")
                        .WithMany("ExportDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_exportdetail_product");

                    b.HasOne("WareHouseManagement.Model.Entity.Warehouse_Entity.Warehouse", "WarehouseNav")
                        .WithMany("ExportDetails")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_exportdetail_warehouse");

                    b.Navigation("FormNav");

                    b.Navigation("ProductNav");

                    b.Navigation("WarehouseNav");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.ImportFormDetail", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Form.StockImportForm", "FormNav")
                        .WithMany("Details")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_importdetail_form");

                    b.HasOne("WareHouseManagement.Model.Entity.Product_Entity.Product", "ProductNav")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_importdetail_product");

                    b.HasOne("WareHouseManagement.Model.Entity.Warehouse_Entity.Warehouse", "WarehouseNav")
                        .WithMany("ImportDetails")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("FK_importdetail_warehouse");

                    b.Navigation("FormNav");

                    b.Navigation("ProductNav");

                    b.Navigation("WarehouseNav");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.StockExportForm", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Receipt.CustomerBuyReceipt", "Receipt")
                        .WithOne("StockExportReport")
                        .HasForeignKey("WareHouseManagement.Model.Form.StockExportForm", "ReceiptId")
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.StockImportForm", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Receipt.VendorReplenishReceipt", "Receipt")
                        .WithOne("StockImportReport")
                        .HasForeignKey("WareHouseManagement.Model.Form.StockImportForm", "ReceiptId")
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.CustomerBuyReceipt", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Customer_Entity.Customer", "Customer")
                        .WithMany("CustomerBuyReceipts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("WareHouseManagement.Model.Receipt.Tax", "Tax")
                        .WithMany("CustomerReceipts")
                        .HasForeignKey("TaxId");

                    b.Navigation("Customer");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.CustomerBuyReceiptDetail", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Product_Entity.Product", "ProductNav")
                        .WithMany("CustomerBuyReceiptDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_orderdetail_product");

                    b.HasOne("WareHouseManagement.Model.Receipt.CustomerBuyReceipt", "ReceiptNav")
                        .WithMany("Details")
                        .HasForeignKey("ReceiptId")
                        .IsRequired()
                        .HasConstraintName("FK_orderdetail_receipt");

                    b.Navigation("ProductNav");

                    b.Navigation("ReceiptNav");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.VendorReplenishReceipt", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Receipt.Tax", "Tax")
                        .WithMany("VendorReceipts")
                        .HasForeignKey("TaxId");

                    b.HasOne("WareHouseManagement.Model.Entity.Vendor_EntiTy.Vendor", "Vendor")
                        .WithMany("VendorReplenishReceipts")
                        .HasForeignKey("VendorId");

                    b.Navigation("Tax");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.VendorReplenishReceiptDetail", b =>
                {
                    b.HasOne("WareHouseManagement.Model.Entity.Product_Entity.Product", "ProductNav")
                        .WithMany("VendorReplenishReceiptDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_replenishdetail_product");

                    b.HasOne("WareHouseManagement.Model.Receipt.VendorReplenishReceipt", "ReceiptNav")
                        .WithMany("Details")
                        .HasForeignKey("ReceiptId")
                        .IsRequired()
                        .HasConstraintName("FK_replenishdetail_receipt");

                    b.Navigation("ProductNav");

                    b.Navigation("ReceiptNav");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Account.ServiceRegistered", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Customer_Entity.Customer", b =>
                {
                    b.Navigation("CustomerBuyReceipts");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Customer_Entity.CustomerGroup", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Product_Entity.Product", b =>
                {
                    b.Navigation("CustomerBuyReceiptDetails");

                    b.Navigation("ExportDetails");

                    b.Navigation("ImportDetails");

                    b.Navigation("Stocks");

                    b.Navigation("VendorReplenishReceiptDetails");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Product_Entity.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Vendor_EntiTy.Vendor", b =>
                {
                    b.Navigation("VendorReplenishReceipts");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Vendor_Entity.VendorGroup", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Entity.Warehouse_Entity.Warehouse", b =>
                {
                    b.Navigation("ExportDetails");

                    b.Navigation("ImportDetails");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.StockExportForm", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Form.StockImportForm", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.CustomerBuyReceipt", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("StockExportReport");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.Tax", b =>
                {
                    b.Navigation("CustomerReceipts");

                    b.Navigation("VendorReceipts");
                });

            modelBuilder.Entity("WareHouseManagement.Model.Receipt.VendorReplenishReceipt", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("StockImportReport");
                });
#pragma warning restore 612, 618
        }
    }
}
